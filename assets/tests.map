{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.jshint.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.lint-test.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.lint-test.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.lint-test.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.lint-test.js","dummy/tests/resolver.jshint.lint-test.js","dummy/tests/router.jshint.lint-test.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.lint-test.js","dummy/tests/unit/mixins/router-scroll-test.js","dummy/tests/unit/mixins/router-scroll-test.jshint.lint-test.js","dummy/tests/unit/services/router-scroll-test.js","dummy/tests/unit/services/router-scroll-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = Ember.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var Promise = Ember.RSVP.Promise;\n});","define('dummy/tests/helpers/module-for-acceptance.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var run = Ember.run;\n  var merge = Ember.merge;\n  function startApp(attrs) {\n    var application = void 0;\n\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    run(function () {\n      application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['ember-qunit', 'ember-cli-qunit', 'dummy/tests/helpers/resolver'], function (_emberQunit, _emberCliQunit, _resolver) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('dummy/tests/test-helper.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/router-scroll-test', ['ember-router-scroll', 'qunit'], function (_emberRouterScroll, _qunit) {\n  'use strict';\n\n  var run = Ember.run;\n  var next = Ember.run.next;\n  var EmberObject = Ember.Object;\n\n\n  (0, _qunit.module)('mixin:router-scroll');\n\n  function getSchedulerMock() {\n    return {\n      scheduleWork: function scheduleWork(eventName, callback) {\n        callback();\n      }\n    };\n  }\n\n  (0, _qunit.test)('when the application is FastBooted', function (assert) {\n    assert.expect(1);\n\n    var done = assert.async();\n    var RouterScrollObject = EmberObject.extend(_emberRouterScroll.default);\n    var subject = RouterScrollObject.create({\n      isFastBoot: true,\n      scheduler: getSchedulerMock(),\n      updateScrollPosition: function updateScrollPosition() {\n        assert.notOk(true, 'it should not call updateScrollPosition.');\n        done();\n      }\n    });\n\n    run(function () {\n      subject.didTransition();\n      next(function () {\n        assert.ok(true, 'it should not call updateScrollPosition.');\n        done();\n      });\n    });\n  });\n\n  (0, _qunit.test)('when the application is not FastBooted', function (assert) {\n    assert.expect(1);\n\n    var done = assert.async();\n    var RouterScrollObject = EmberObject.extend(_emberRouterScroll.default);\n    var subject = RouterScrollObject.create({\n      isFastBoot: false,\n      scheduler: getSchedulerMock(),\n      updateScrollPosition: function updateScrollPosition() {\n        assert.ok(true, 'it should call updateScrollPosition.');\n        done();\n      }\n    });\n\n    run(function () {\n      subject.didTransition();\n    });\n  });\n});","define('dummy/tests/unit/mixins/router-scroll-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/router-scroll-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/router-scroll-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/router-scroll-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  var set = Ember.set;\n  var get = Ember.get;\n\n\n  (0, _emberQunit.moduleFor)('service:router-scroll');\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it inits `scrollMap` and `key`', function init(assert) {\n    var service = this.subject();\n    assert.deepEqual(get(service, 'scrollMap'), {});\n    assert.deepEqual(get(service, 'key'), null);\n  });\n\n  (0, _emberQunit.test)('updating will set `scrollMap` to the current scroll position', function scrollMap(assert) {\n    var service = this.subject();\n\n    var expected = { x: window.scrollX, y: window.scrollY };\n    set(service, 'key', '123');\n    service.update();\n    assert.deepEqual(get(service, 'scrollMap'), { 123: expected });\n  });\n\n  (0, _emberQunit.test)('updating will not set `scrollMap` to the current scroll position if `key` is not yet set', function scrollMapCurrentPos(assert) {\n    var service = this.subject();\n\n    service.update();\n    assert.deepEqual(get(service, 'scrollMap'), {});\n  });\n\n  (0, _emberQunit.test)('computing the position for an existing state uuid return the coords', function existingUUID(assert) {\n    var service = this.subject();\n    window.history.replaceState({ uuid: '123' }, null);\n\n    var expected = { x: 1, y: 1 };\n    set(service, 'scrollMap.123', expected);\n    assert.deepEqual(get(service, 'position'), expected);\n  });\n\n  (0, _emberQunit.test)('computing the position for a state without a cached scroll position returns default', function cachedScroll(assert) {\n    var service = this.subject();\n    var state = window.history.state;\n    window.history.replaceState({ uuid: '123' }, null);\n\n    var expected = { x: 0, y: 0 };\n    assert.deepEqual(get(service, 'position'), expected);\n    window.history.replaceState(state, null);\n  });\n\n  (0, _emberQunit.test)('computing the position for a non-existant state returns default', function nonExistantState(assert) {\n    var service = this.subject();\n\n    var expected = { x: 0, y: 0 };\n    assert.deepEqual(get(service, 'position'), expected);\n  });\n});","define('dummy/tests/unit/services/router-scroll-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/router-scroll-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/router-scroll-test.js should pass jshint.');\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;","file":"tests.js"}